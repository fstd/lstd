lstd: Supposedly reliable POSIX shell list handling
===================================================


--- Name spaces ---

We claim the variable name space _lstd_*.  Use of that name space, or fiddling
with existing variables in that name space will produce undefined behavior.

We provide our public interface in the list_* function name space (see below).
All functions are executed in the current shell context (not in subshells), thus
our claim of a particular variable name space.

We claim the _lstd_* function name space as well.  Do not mess with it, do not
call _lstd_*() functions.


--- How it works ---

A `list` is a variable that consists of whitespace-separated `list elements`.
A `list element` is a string that starts and ends with a single quote.  If an
element needs to contain literal single quotes, they are translated into the
4-byte sequence '\''
This exploits the fact that directly adjacent tokens are not split into
separate fields by the shell.
As an example, if we were to store the string
  what's up
in a list, the respective list element would be
  'what'\''s up'       # 'what' (no space here) \' (no space here) 's up'
which the shell, when evaluating (see below), correctly puts back together into
a single field with the value
  what's up

This format was chosen in order to make it straightforward to turn lists into
the positional parameters and vice-versa.
Suppose we're having a two element list containing the strings
  foo bar    #list element: 'foo bar'
and
  what's up  #list element: 'what'\''s up'
the respective list variable would contain the two list elements, separated by
whitespace:
  'foo bar' 'what'\''s up'
This string is directly usable in
  eval "set -- $thelist"
with (due to the single quotes) no risk of any form of expansion or substituion
happening behind the scenes, i.e. we could legitimately try to add '$(uname)' to
a list, it will not be expanded anywhere.


--- License/Author ---

This software was written by Timo Buhrmester and is subjected to a 3-clause
BSD license.  Feel free to share and hack.  See the LICENSE file for details.


--- Usage and interface overview/documentation ---


Synopsis:
---------

To use the list handling routines, source lstd.inc.sh at the start of the script
  . ./lstd.inc.sh

To create a new list, or to clear an existing one, no function call is required.
Simply set the variable you want your list to contain to the empty string.
  mylist=
in subsequent list_*() calls referring to this particular list,
the <lstnam> parameter has to be 'mylist'.  An arbitrary number of coexisting
lists can be handled this way.

Lists can be copied, passed around, etc like regular variables, because
that's what they are.
  listcopy="$mylist"  # Now have two lists

To destroy a list, simply empty the list variable, or unset it
  mylist=


Iteration:
----------

A list can/should be iterated with one of the following idioms:

This is likely the fastest way:
  eval "set -- $mylist"
  while [ $# -gt 0 ]; do
    # do something with "$1" (always use w/ double quotes!)
    shift
  done

Or (slower, but also reliable):
  list_count mylist count
  c=1
  while [ $c -le $count ]; do
    list_get mylist $c elem
    # do something with "$elem" (always use w/ double quotes!)
  done

Or even (slower, also reliable, but kills the list):
  while list_pop_front mylist elem; do
    # do something with "$elem" (always use w/ double quotes!)
  done

Or (most flexible):
  Callback()
  {
    listname="$1"
    index="$2"
    elem="$3"
    # Do something, possibly even list_replace "$listname" "$index" "newdata"
    return 0 # or 1
  }

  list_foreach mylist Callback


General notes:
---------------

It is valid to do:
  eval "set -- $mylist"
which initializes the positional parameters with this list, where convenient.
The other way around works as well:
  list_set mylist "$@"  # (see also below)
which (re)initializes the 'mylist' list with the contents of the positional
parameters.

The only character NOT allowed in a list element is the NUL byte.  This makes
the list unusable for dealing with arbitrary binary data (why would we anyway),
but it does make it useful for dealing with arbitrarily braindead filenames
since they also happen to forbid NUL


Interface overview:
-------------------

The following interface is defined to deal with lists.
(Detailed description below)
list_set()         <lstnam> <list elements ...>
list_insert()      <lstnam> <index> <list elements ...>
list_replace()     <lstnam> <index> <list element>
list_add_back()    <lstnam> <list elements ...>
list_add_front()   <lstnam> <list elements ...>
list_front()       <lstnam> [<outvar>]
list_back()        <lstnam> [<outvar>]
list_get()         <lstnam> <index> [<outvar>]
list_count()       <lstnam> [<outvar>]
list_find()        <lstnam> <list element> [<outvar>]
list_dump()        <lstnam>
list_remove()      <lstnam> <index> [<outvar>]
list_pop_front()   <lstnam> [<outvar>]
list_pop_back()    <lstnam> [<outvar>]
list_slice()       <lstnam> <first_index> <last_index> [<outvar>]
list_foreach()     <lstnam> <action>
list_collect()     <lstnam> <decider> [<outvar>]
list_retain()      <lstnam> <decider> [<outvar>]
list_fromstr()     <lstnam> [<IFS>] "<string>"    # USE WITH CAUTION

NOTE that our indices begin at 1, not at zero.  This is to avoid headaches
when switching back and forth between the list_*() interface and the
positional parameters, which also are 1-based.

Also note that some functions have an optional parameter <outvar>.
If this parameter is not empty, it will be interpreted as the output
variable to assign the result of the operation to (which depending on the
function is either a list element or a sublist).
If the <outvar> parameter is absent, or the empty string, these functions
will instead write their result to stdout, so that it can be caught with
command substitution.
BUT NOTE THAT COMMAND SUBSTITUTION EATS TRAILING NEWLINES, so providing an
output variable name is preferred, or great caution is advised!
For example: (suppose we have a list named `mylist`)
The following is WRONG: if the list element ends in newlines, they're stripped
  element="$(list_pop_front mylist)"     # WRONG!

The following is SAFE, but tedious to write and read:
  element="$(list_pop_front mylist; echo x)"; element="${element%x}"  # SAFE

The preferred way is using an output variable name:
  list_pop_front mylist element  # SAFE, now "$element" contains the list head

The following functions do not share this problem and can safely command-subst-
ituted with no further safety measures (but still there is no need not to use
<outvar>):
  list_count, list_slice, list_collect, list_retain



(*) In the following paragraph, a function "Outputting" something means as-
    signing to the variable <outvar>, if provided, or else printing to stdout.
    In all cases, if just a '0' is provided for <outvar>, no output will
    be produced

list_set()         <lstnam> <list elements ...>
  (Re)initialize list <lstnam> with the list elements supplied as arguments
  This is intended to allow creation of lists from the positional parameters,
  i.e.  list_set mylist "$@"

  Returns successfully.


list_insert()      <lstnam> <index> <list elements ...>
  Insert elements <list elements ...> into list <lstnam> at index <index>.
  The element originally at <index> and all following elements' indices will
  be incremented by the amount of newly added elements (i.e. shift right)

  <index> can be a number between 1 and $(list_count <lstnam>), or zero, in
  which case we're adding at the END of the list

  Returns successfully iff the element(s) were all inserted.


list_add_back()    <lstnam> <list elements ...>
  Convenience function, equiv. to list_insert <lstnam> 0 <list elements ...>

  Returns successfully.


list_add_front()   <lstnam> <list elements ...>
  Convenience function, equiv. to list_insert <lstnam> 1 <list elements ...>

  Returns successfully.


list_replace()     <lstnam> <index> <list element> [<outvar>]
  Replace element at index <index> in list <lstnam> with <list element>.

  <index> can be a number between 1 and $(list_count <lstnam>), or zero, in
  which case it refers to the LAST index

  Outputs(*) the element that was overwritten

  Returns successfully iff an element was replaced, even if with the same value.


list_get()         <lstnam> <index> [<outvar>]
  Obtain the element at index <index> in list <lstnam>

  <index> can be a number between 1 and $(list_count <lstnam>), or zero, in
  which case it refers to the LAST index

  Outputs(*) the obtained element.

  Returns successfully iff an element at the requested index exists.


list_front()       <lstnam> [<outvar>]
  Convenience function equivalent to list_get <lstnam> 1 <outvar>

  Returns successfully iff the list was not empty (but it might be now)


list_back()        <lstnam> [<outvar>]
  Convenience function equivalent to list_get <lstnam> 0 <outvar>

  Returns successfully iff the list was not empty (but it might be now)


list_count()       <lstnam> [<outvar>]
  Outputs(*) the number of elements in list <lstnam>.

  Returns successfully.


list_find()        <lstnam> <list element> [<outvar>]
  Attempts to find an element of list <lstnam> that compares equal to
  <list element>

  Outputs(*) the index of the element, if found, zero otherwise

  Returns successfully iff an element was found


list_dump()        <lstnam>
  For debugging, dump a list to stderr

  Returns successfully.


list_remove()      <lstnam> <index> [<outvar>]
  Remove element at index <index> from list <lstnam>.
  The element at index <index> is removed from the list <lstnam>, and all
  following elements' indices will be decremented by one (i.e. shift left)

  <index> can be a number between 1 and $(list_count <lstnam>), or zero, in
  which case we're removing the END of the list

  Outputs(*) the removed element

  Returns successfully iff an element was removed


list_pop_front()   <lstnam> [<outvar>]
  Convenience function equivalent to list_remove <lstnam> 1 <outvar>

  Returns successfully iff the list was not empty (but it might be now)


list_pop_back()    <lstnam> [<outvar>]
  Convenience function equivalent to list_remove <lstnam> 0 <outvar>

  Returns successfully iff the list was not empty (but it might be now)


list_slice()       <lstnam> <first_index> <last_index> [<outvar>]
  Obtain a sublist containing list <lstnam>'s elements with indices
  <from_index> through <to_index> (inclusive)

  <from_index> and <to_index> can be numbers between 1 and
  $(list_count <lstnam>), or zero, in which case they're taken to represent
  the LAST index available.
  However, <from_index> must be less than or equal to <to_index>

  Outputs(*) the sublist.

  Returns successfully iff the given indices represented a valid range inside
  the list and hence a sublist could be created


list_foreach()     <lstnam> <action>
  Run <action> for each element of list <lstnam>

  <action> can be the name of a shell function, or possibly built-in or
  external command; it is run/called for each list element; it is invoked with
  three arguments, $1 is the list name, $2 is the (numerical) index,
  $3 is the string stored at that index.

  NOTE THAT only a limited set of operations on the current list is valid
  from within the <action> callback.  These are safe to use:
    list_front(),
    list_back()
    list_get()
    list_count()
    list_dump()
    list_slice()
    list_collect()
    list_replace()  # replace is ONLY SAFE FOR indices <= the current index

  Under no circumstances should <action> attempt to call list_foreach(),
  even for other lists.  We might get around this issue by using the non-POSIX
  "local" keyword, or with some more "eval", but we currently don't.

  Returns successfully if <action> returned successfully for every element


list_collect()     <lstnam> <decider> [<outvar>]
  Create a sublist by running <decider> for each element of list <lstnam>

  <decider> is the name of a shell function, or possibly built-in or
  external command; it is run/called for each list element; it is invoked with
  three arguments, $1 is the list name, $2 is the (numerical) index,
  $3 is the string stored at that index.

  A new (sub)list is contructed containing all elements for which
  <decider> returned successfully.

  Under no circumstances should <decider> attempt to call list_collect(),
  even for other lists.  We might get around this issue by using the non-POSIX
  "local" keyword, or with some more "eval", but we currently don't.

  Outputs(*) the created sublist

  Returns successfully.


list_retain()      <lstnam> <decider> [<outvar>]
  Manipulate list <lstnam> by running <decider> for each element.

  <decider> is the name of a shell function, or possibly built-in or
  external command; it is run/called for each list element; it is invoked with
  three arguments, $1 is the list name, $2 is the (numerical) index,
  $3 is the string stored at that index.

  All elements for that <decider> returns successfully are retained
  in the list, the others are removed.

  Under no circumstances should <decider> attempt to call list_retain(),
  even for other lists.  We might get around this issue by using the non-POSIX
  "local" keyword, or with some more "eval", but we currently don't.

  Outputs(*) the list of elements that were REMOVED(!) from <lstnam>

  Returns successfully.


list_fromstr()     <lstnam> [<IFS>] "<string>"
  (Re)initialize list <lstnam> with the content of field-splitted <string>
  If <IFS> is omitted, we split on blank, TAB and newline

  NOTE THAT <string> MUST be a single field (i.e. quote it!), otherwise
  it WILL end in tears, especially when <IFS> is omitted.

  This function should probably be used with caution and might be dropped
  if it turns out to be not useful enough to justify its existence.

  Returns successfully.


(C) 2015, Timo Buhrmester
